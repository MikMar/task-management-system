version: "3.8"

services:
  api-gateway:
    build:
      context: ./api-gateway # Path to the Dockerfile
      dockerfile: ./docker/Dockerfile # Explicitly specify the Dockerfile
    container_name: api-gateway
    working_dir: /app
    volumes:
      - ./api-gateway:/app # Mounts the api-gateway directory
      - /app/node_modules # Avoids overwriting node_modules
    stdin_open: true # Keeps container open for interactive shell
    tty: true # Enables terminal access
    command: sh -c "npm install && npm run dev"
    ports:
      - "3000:3000"
    environment:
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - auth-service
      - task-service
    networks:
      - tms

  auth-service:
    build:
      context: ./auth-service # Path to the Dockerfile
      dockerfile: ./docker/Dockerfile # Explicitly specify the Dockerfile
    container_name: auth-service
    working_dir: /app
    volumes:
      - ./auth-service:/app
      - /app/node_modules # Avoids overwriting node_modules
    stdin_open: true # Keeps container open for interactive shell
    command: sh -c "npm install && npx prisma db push && npm run dev"
    ports:
      - "50051:50051" # gRPC port
    environment:
      - DATABASE_URL=mongodb://auth-db:27017/auth?replicaSet=rs0
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - auth-db
    networks:
      - tms

  task-service:
    build:
      context: ./task-service # Path to the Dockerfile
      dockerfile: ./docker/Dockerfile # Explicitly specify the Dockerfile
    container_name: task-service
    working_dir: /app
    volumes:
      - ./task-service:/app
      - /app/node_modules # Avoids overwriting node_modules
    stdin_open: true # Keeps container open for interactive shell
    command: sh -c "npm install && npx prisma generate && npx prisma db push && npm run dev"
    ports:
      - "50052:50052" # gRPC port
    environment:
      - DATABASE_URL=postgres://admin:postgres@task-db:5432/task
    depends_on:
      - task-db
      - notification-service
    networks:
      - tms

  notification-service:
    build:
      context: ./notification-service
      dockerfile: ./docker/Dockerfile
    container_name: notification-service
    working_dir: /app
    volumes:
      - ./notification-service:/app
      - /app/node_modules # Avoids overwriting node_modules
    command: sh -c "npm install && npm run dev"
    ports:
      - "3100:3000"
    depends_on:
      - kafka
    networks:
      - tms

  task-db:
    image: postgres:13
    container_name: task-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: task
    ports:
      - "5432:5432"
    volumes:
      - task-db-data:/var/lib/postgresql/data
    networks:
      - tms

  auth-db:
    image: mongo:4.4
    container_name: auth-db
    command: ["bash", "/docker-entrypoint-initdb.d/init-replica.sh"]
    ports:
      - "27017:27017"
    volumes:
      - auth-db-data:/data/db
      - ./mongo-init/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro
    networks:
      - tms

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - tms

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - tms

volumes:
  auth-db-data: {}
  task-db-data: {}

networks:
  tms:
    driver: bridge
